pragma solidity ^0.4.2;
contract tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData); }

contract MyToken {
    /* Public variables of the token */
    /* 代币的公有变量 */
    string public standard = 'Token 0.1';
    string public name;
    string public symbol;
    uint8 public decimals;
    uint256 public totalSupply;

    /* This creates an array with all balances */
    /* 余额数组 */
    mapping (address => uint256) public balanceOf;
    mapping (address => mapping (address => uint256)) public allowance;

    /* This generates a public event on the blockchain that will notify clients */
    /* 在区块链上创建了一个公开的事件,事件触发时他将通知客户端 */
    event Transfer(address indexed from, address indexed to, uint256 value);

    /* Initializes contract with initial supply tokens to the creator of the contract */
    /* 初始化合约,同时给合约的创建者一些初始代币 */
    function MyToken(
        uint256 initialSupply,
        string tokenName,
        uint8 decimalUnits,
        string tokenSymbol
        ) {
        balanceOf[msg.sender] = initialSupply;              // Give the creator all initial tokens 给创建者所有的初始代币
        totalSupply = initialSupply;                        // Update total supply 更新发行总量
        name = tokenName;                                   // Set the name for display purposes 设置代币的名称
        symbol = tokenSymbol;                               // Set the symbol for display purposes 设置代币的标识
        decimals = decimalUnits;                            // Amount of decimals for display purposes 展示的小数点
    }

    /* Send coins 发送币*/
    function transfer(address _to, uint256 _value) {
        if (balanceOf[msg.sender] < _value) throw;           // Check if the sender has enough 检查发送者是否拥有足够余额
        if (balanceOf[_to] + _value < balanceOf[_to]) throw; // Check for overflows 检查是否溢出
        balanceOf[msg.sender] -= _value;                     // Subtract from the sender 从发送者减掉发送额
        balanceOf[_to] += _value;                            // Add the same to the recipient 给接收者加上相同的量
        Transfer(msg.sender, _to, _value);                   // Notify anyone listening that this transfer took place 通知任何监听该交易的客户端
    }

    /* Allow another contract to spend some tokens in your behalf 允许另外的合约花费代币*/
    function approve(address _spender, uint256 _value)
        returns (bool success) {
        allowance[msg.sender][_spender] = _value;
        return true;
    }

    /* Approve and then comunicate the approved contract in a single tx 批准然后和被批准的合约通信*/
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)
        returns (bool success) {
        tokenRecipient spender = tokenRecipient(_spender);
        if (approve(_spender, _value)) {
            spender.receiveApproval(msg.sender, _value, this, _extraData);
            return true;
        }
    }

    /* A contract attempts to get the coins 货币转移*/
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
        if (balanceOf[_from] < _value) throw;                 // Check if the sender has enough
        if (balanceOf[_to] + _value < balanceOf[_to]) throw;  // Check for overflows
        if (_value > allowance[_from][msg.sender]) throw;   // Check allowance
        balanceOf[_from] -= _value;                          // Subtract from the sender
        balanceOf[_to] += _value;                            // Add the same to the recipient
        allowance[_from][msg.sender] -= _value;
        Transfer(_from, _to, _value);
        return true;
    }

    /* This unnamed function is called whenever someone tries to send ether to it */
    function () {
        throw;     // Prevents accidental sending of ether
    }
}
